name: ci

on: workflow_dispatch

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Get the Git tag
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}          
          # generate Docker tags based on the following events/attributes
          tags: |
            latest
            ${{ env.TAG }}
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get the Git tag
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: downcase REPO
        run: |
          echo "REPO=${GITHUB_REPOSITORY@L}" >> "${GITHUB_ENV}"
      - name: Send Deploy Webhook to Keel
        uses: fjogeleit/http-request-action@v1
        id: keel_req
        with:
          url: 'https://keel.wolfeydev.com/v1/webhooks/native'
          method: 'POST'
          data: '{"name": "${{ env.REGISTRY }}/${{ env.REPO }}", "tag": "${{ env.TAG }}"}'
      - name: Show Response
        run: |
          echo ${{ steps.keel_req.outputs.response }}
          echo ${{ steps.keel_req.outputs.headers }}
          echo ${{ steps.keel_req.outputs.status }}
          echo ${{ fromJson(steps.keel_req.outputs.response) }}